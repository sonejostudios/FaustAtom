# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.faust':

# import libs
  'import stdfaust.lib':
    'prefix': 'import stdfaust.lib'
    'body': 'import("stdfaust.lib");'



# declare all
  'declare meta info all':
    'prefix': 'declare meta info all'
    'body': """
            declare name        "DSP Name";
            declare version     "0.1";
            declare author      "Author's Name";
            declare copyright   "Copyright";
            declare license     "GPL v3";
            declare reference   "Website/Email";
            declare description	"Description";
    """


# sliders
  'slider.h':
    'prefix': 'slider.h'
    'body': 'hslider("${1:volume}",${2:0},${3:0},${4:1},${5:0.01})$6'

  'slider.v':
    'prefix': 'slider.v'
    'body': 'vslider("${1:volume}",${2:0},${3:0},${4:1},${5:0.01})$6'



  'slider.h dB':
    'prefix': 'slider.h dB'
    'body': 'hslider("Level dB[unit: dB]", 0, -70, 10, 1)'

  'slider.v dB':
    'prefix': 'slider.v dB'
    'body': 'vslider("Level dB[unit: dB]", 0, -70, 10, 1)'



  'slider.knob':
    'prefix': 'slider.knob'
    'body': 'hslider("knob[style: knob]", 0, 0, 1, 0.01)'



# special sliders
  'slider.nentry':
    'prefix': 'slider.nentry'
    'body': 'nentry("foo", 0, 0, 10, 1)'

  'slider.menu':
    'prefix': 'slider.menu'
    'body': """hslider("Menu[style:menu{'Zero':0 ; 'One':1 ; 'Two':2}]", 0, 0, 2, 1)"""

  'slider.radio.h':
    'prefix': 'slider.radio.h'
    'body': """hslider("Radio Buttons[style:radio{'Zero':0 ; 'One':1 ; 'Two':2}]", 0, 0, 2, 1)"""

  'slider.radio.v':
    'prefix': 'slider.radio.v'
    'body': """vslider("Radio Buttons[style:radio{'Zero':0 ; 'One':1 ; 'Two':2}]", 0, 0, 2, 1)"""


# gui bools
  'button':
    'prefix': 'button'
    'body': 'button("foo")'

  'checkbox':
    'prefix': 'checkbox'
    'body': 'checkbox("foo")'


# groups
  'group.h':
    'prefix': 'group.h'
    'body': 'hgroup("foo",$1)'

  'group.v':
    'prefix': 'group.v'
    'body': 'vgroup("foo",$1)'

  'group.tab':
    'prefix': 'group.tab'
    'body': 'tgroup("foo",$1)'



# bargraphs
  'bargraph.h':
    'prefix': 'bargraph.h'
    'body': 'hbargraph("h.bargraph", 0, 1)'

  'bargraph.v':
    'prefix': 'bargraph.v'
    'body': 'vbargraph("v.bargraph", 0, 1)'


  'bargraph.h dB':
    'prefix': 'bargraph.h dB'
    'body': 'hbargraph("dB graph[unit: dB]", -70, 10)'

  'bargraph.v dB':
    'prefix': 'bargraph.v dB'
    'body': 'vbargraph("dB graph[unit: dB]", -70, 10)'

  'bargraph.led':
    'prefix': 'bargraph.led'
    'body': 'hbargraph("led[style: led]", 0, 1)'

  'bargraph.numerical':
    'prefix': 'bargraph.numerical'
    'body': 'hbargraph("numercial[style: led]", 0, 1)'


# delay tables
  'delay @':
    'prefix': 'delay @samples'
    'body': '_@10'

  'select2':
    'prefix': 'select2(_,_,_)'
    'body': 'select2(_,_,_)'

  'select3':
    'prefix': 'select3(_,_,_,_)'
    'body': 'select3(_,_,_,_)'


# arithmetics
  'int':
    'prefix': 'int'
    'body': 'int'

  'float':
    'prefix': 'float'
    'body': 'float'


# presets
  'preset volume':
    'prefix': 'preset volume'
    'body': 'volume = hslider("vol", 0, 0, 1, 0.01) : smooth(0.999);'

  'preset mute':
    'prefix': 'preset mute'
    'body': 'mute = 1-checkbox("mute") : smooth(0.999);'

  'preset onoff':
    'prefix': 'preset onoff'
    'body': 'onoff = checkbox("on-off") : smooth(0.999);'



# libs

  # miscoscillators
  'osc(440)':
    'prefix': 'os.osc(440)'
    'body': 'os.osc(440)'


  # basic.lib
  'db2linear(l) (basic.lib)':
    'prefix': 'db2linear(l) (basic.lib)'
    'body': 'ba.db2linear(l)'

  'linear2db(g) (basic.lib)':
    'prefix': 'linear2db(g) (basic.lib)'
    'body': 'ba.linear2db(g)'

  'latch(clocksig) (basic.lib)':
    'prefix': 'latch(clocksig) (basic.lib)'
    'body': 'ba.latch(clocksig)'

  'sAndH(t) (basic.lib)':
    'prefix': 'sAndH(t) (basic.lib)'
    'body': 'ba.sAndH(t)'



  # signal.lib
  'smooth(0.999) (signal.lib)':
    'prefix': 'smooth(0.999) (signal.lib)'
    'body': 'si.smooth(0.999)'


  # analyzer.lib
  'amp_follower(rel) (analyzer.lib)':
    'prefix': 'amp_follower(rel) (analyzer.lib)'
    'body': 'an.amp_follower(0.5)'

  'amp_follower_ud(att,rel) (analyzer.lib)':
    'prefix': 'amp_follower_ud(att,rel) (analyzer.lib)'
    'body': 'an.amp_follower_ud(0.5, 1)'

  'amp_follower_ar(att,rel) (analyzer.lib)':
    'prefix': 'amp_follower_ar(att,rel) (analyzer.lib)'
    'body': 'an.amp_follower_ar(1, 0.5)'

